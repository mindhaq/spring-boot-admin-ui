buildscript {
    ext {
        gradleDockerVersion = "1.2"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

version = '2.0.3'

jar {
    baseName = 'spring-boot-admin-ui'
    version = project.version
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "de.codecentric:spring-boot-admin-starter-client:${version}"
    compile "de.codecentric:spring-boot-admin-starter-server:${version}"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
    distributionType = "ALL"
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    if(project.convention.findPlugin(JavaPluginConvention)) {
        // Change the output directory for the main and test source sets back to the old path
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
    }
}

task buildDocker(type: Docker) {
    baseImage = 'java:8-jre-alpine'
    project.group = "gelder"
    applicationName = "spring-boot-admin-ui"
    maintainer = "Martin Geldmacher"
    entryPoint(['java',
                '-jar',
                '/app.jar'])
    exposePort(8080) // UI

    addFile {
        from jar
        rename {'app.jar'}
    }
}

buildDocker.dependsOn(build)
